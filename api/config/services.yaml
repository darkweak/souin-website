# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    frontend_url: '%env(FRONTEND_URL)%'
    trusted_middleware: '%env(TRUSTED_MIDDLEWARE)%'
    
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    App\State\UserPasswordHasher:
        bind:
            $processor: '@api_platform.doctrine.orm.state.persist_processor'
    App\Decorator\AdminContextBuilder:
        decorates: api_platform.serializer.context_builder
        arguments: [ '@App\Decorator\AdminContextBuilder.inner' ]
        autoconfigure: false
    App\Extension\Domains:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection }
    App\Extension\Configurations:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection }
    
    App\Subscriber\RegistrationSubscriber:
        tags:
            - { name: doctrine.event_listener, connection: default, event: handleRegistration }
        arguments:
            $frontendUrl: '%frontend_url%'

    App\Action\ActivationAction:
        tags: [ 'controller.service_arguments' ]

    App\Action\ChangePasswordAction:
        tags: [ 'controller.service_arguments' ]

    souin_ui.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    App\Security\DomainVoter:
        arguments: [ '@request_stack' ]
